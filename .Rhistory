type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
model <- with(avg.daily.act.pat, lm(interval ~ average.steps.per.interval))
abline(model)
model
abline(model)
with(avg.daily.act.pat, plot(interval_dat, average.steps.per.interval,
type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
with(avg.daily.act.pat, plot(interval_dat, average.steps.per.interval,
type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
merge.data.frame(rawData, avg.daily.act.pat, by.x = interval, by.y = interval)
names(rawData)
names(avg.daily.act.pat)
merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
head(rawData)
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
str(t)
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
t$steps[is.na(t$steps)] <- t$average.steps.per.interval[is.na(t$steps)]
enhanced.set <- t %>% select(interval, steps, date)
summary(enhanced.set)
enhanced.perDay <- enhanced.set %>% select(date, steps) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary(enhanced.perDay)
hist(enahnced.perDay$total.steps.per.day[!is.na(enhanced.perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
hist(enhanced.perDay$total.steps.per.day[!is.na(enhanced.perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
enhanced.mean.total.steps <- mean(enhanced.perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(enhanced.mean.total.steps, digits = 0))))
enhanced.median.total.steps <- median(enhanced.perDay$total.steps.per.day)
print(paste("Median of total steps:", round(enhanced.mean.total.steps, digits = 0)))
?weekdays
weekdays(rawData$date[1:10])
Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$is.weekday <- stri_sub(weekdays(enhanced.set$date), 1, 1) == "S"
Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$is.weekday <- substr(weekdays(enhanced.set$date), 1, 1) == "S"
head(enhanced.set)
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$is.weekday <- substr(weekdays(enhanced.set$date), 1, 1) == "S"
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$is.weekday <- factor(substr(weekdays(enhanced.set$date), 1, 1) == "S")
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$is.weekday <- factor(if(substr(weekdays(enhanced.set$date), 1, 1) == "S") "weekday" else "weekend")
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <- factor(substr(weekdays(enhanced.set$date), 1, 1) == "S")
with(enhanced.set, weekday[weekday == TRUE]) <- "weekday"
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <- factor(substr(weekdays(enhanced.set$date), 1, 1) == "S")
enhanced.set$weekday[enhanced.set$weekday == TRUE] <- "weekday"
enhanced.set$weekday[enhanced.set$weekday == FALSE] <- "weekend"
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <- substr(weekdays(enhanced.set$date), 1, 1) == "S"
enhanced.set$weekday[enhanced.set$weekday == TRUE] <- "weekday"
enhanced.set$weekday[enhanced.set$weekday == FALSE] <- "weekend"
head(enhanced.set)
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <- substr(weekdays(enhanced.set$date), 1, 1) == "S"
enhanced.set$weekday[enhanced.set$weekday == TRUE] <- "weekday"
enhanced.set$weekday[enhanced.set$weekday == FALSE] <- "weekend"
enhanced.set$weekday <- factor(enhanced.set$weekday)
weekday.set <- enhanced.set %>% select(weekday, steps) %>%
ddply(.(weekdays(weekday, interval), summarize, ))
weekday.set <- enhanced.set %>% select(weekday, steps) %>%
ddply(.(weekday, interval), summarize, ))
weekday.set <- enhanced.set %>% select(weekday, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps)))
weekday.set <- enhanced.set %>% select(weekday, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
head(weekday.set)
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M")
head(weekday.set)
install.packages("markdown")
library("markdown", lib.loc="~/R/win-library/3.3")
remove.packages("markdown", lib="~/R/win-library/3.3")
install.packages("markdowns)
install.packages("markdown")
install.packages("markdown")
install.packages("markdown")
getOption
getOption()
getOption("repos")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("markdown")
?print
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(xtable)
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary(rawData)
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
print(xtable(summary(perDay)), type = "html"
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
print(xtable(summary(perDay)), type = "html")
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
as.data.frame(stargazer(summary(perDay)))
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
as.data.frame(summary(perDay))
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
t <- as.data.frame(summary(perDay))
names(t) <- c("Empty", "Column", ".")
t
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
t <- as.data.frame(summary(perDay))
names(t) <- c("Empty", "Column", ".")
t[,2:3]
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
t <- as.data.frame(summary(perDay))
names(t) <- c("Empty", "Column", ".")
print(t[,2:3])
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
summary.out <- function(x) {
t <- summary(x)
names(t) <- c("Empty", "Column", ".")
print(t)
}
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay))
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
summary.out <- function(x) {
t <- as.data.frame(summary(x))
names(t) <- c("Empty", "Column", ".")
print(t)
}
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
summary.out <- function(x) {
t <- as.data.frame(summary(x))
names(t) <- c("Empty", "Column", ".")
print(t[,2:3])
}
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay)
avg.daily.act.pat <- rawData %>% select(interval, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(interval), summarize, average.steps.per.interval = mean(steps))
summary.out(avg.daily.act.pat)
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
t$steps[is.na(t$steps)] <- t$average.steps.per.interval[is.na(t$steps)]
enhanced.set <- t %>% select(interval, steps, date)
summary.out(enhanced.set)
enhanced.perDay <- enhanced.set %>% select(date, steps) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(enhanced.perDay)
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
summary(rawData)
t <- as.data.frame(summary(rawData))
head(t)
print(t)
t <- as.data.table(summary(rawData))
print(t)
t <- as.list(summary(rawData))
print(t)
library(xtable)
t <- xtable(summary(rawData))
print(t)
t <- as.data.table(summary(rawData))
install.packages("formattable")
library(formattable)
formattable(t)
formattable(t[,2:3])
summary.out(rawData)
formattable(summary.out(rawData))
t
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(formattable)
summary.out <- function(x) {
t <- as.data.frame(summary(x))
names(t) <- c("Empty", "Column", ".")
t[,2:3]
}
formattable(summary.out(rawData))
summary.out(rawData)
formattable(summary.out(rawData))
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
library(formattable)
summary.out <- function(x) {
t <- as.data.frame(summary(x))
names(t) <- c("Empty", "Column", ".")
formattable(t[,2:3])
}
summary.out(rawData)
?formattable
summary(rawData)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
summary.out <- function(x) {
t <- as.data.frame(summary(x))
names(t) <- c("Empty", "Column", "Value")
t[!is.na(t$Value),2:3]
}
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay)
hist(perDay$total.steps.per.day[!is.na(perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
mean.total.steps <- mean(perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(mean.total.steps, digits = 0))))
median.total.steps <- median(perDay$total.steps.per.day)
print(paste("Median of total steps:", round(mean.total.steps, digits = 0)))
avg.daily.act.pat <- rawData %>% select(interval, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(interval), summarize, average.steps.per.interval = mean(steps))
summary.out(avg.daily.act.pat)
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
head(avg.daily.act.pat)
with(avg.daily.act.pat, plot(interval_dat, average.steps.per.interval,
type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
t$steps[is.na(t$steps)] <- t$average.steps.per.interval[is.na(t$steps)]
enhanced.set <- t %>% select(interval, steps, date)
summary.out(enhanced.set)
enhanced.perDay <- enhanced.set %>% select(date, steps) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(enhanced.perDay)
hist(enhanced.perDay$total.steps.per.day[!is.na(enhanced.perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
enhanced.mean.total.steps <- mean(enhanced.perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(enhanced.mean.total.steps, digits = 0))))
enhanced.median.total.steps <- median(enhanced.perDay$total.steps.per.day)
print(paste("Median of total steps:", round(enhanced.mean.total.steps, digits = 0)))
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <-
factor(
ifelse(substr(weekdays(enhanced.set$date), 1, 1) == "S", "weekend", "weekday"))
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M")
summary.out(weekday.set)
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay)
hist(perDay$total.steps.per.day[!is.na(perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
mean.total.steps <- mean(perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(mean.total.steps, digits = 0))))
median.total.steps <- median(perDay$total.steps.per.day)
print(paste("Median of total steps:", round(mean.total.steps, digits = 0)))
avg.daily.act.pat <- rawData %>% select(interval, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(interval), summarize, average.steps.per.interval = mean(steps))
summary.out(avg.daily.act.pat)
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
head(avg.daily.act.pat)
with(avg.daily.act.pat, plot(interval_dat, average.steps.per.interval,
type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
t$steps[is.na(t$steps)] <- t$average.steps.per.interval[is.na(t$steps)]
enhanced.set <- t %>% select(interval, steps, date)
summary.out(enhanced.set)
enhanced.perDay <- enhanced.set %>% select(date, steps) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(enhanced.perDay)
hist(enhanced.perDay$total.steps.per.day[!is.na(enhanced.perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
enhanced.mean.total.steps <- mean(enhanced.perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(enhanced.mean.total.steps, digits = 0))))
enhanced.median.total.steps <- median(enhanced.perDay$total.steps.per.day)
print(paste("Median of total steps:", round(enhanced.mean.total.steps, digits = 0)))
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <-
factor(
ifelse(substr(weekdays(enhanced.set$date), 1, 1) == "S", "weekend", "weekday"))
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M")
summary.out(weekday.set)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
source("SummaryOut.R")
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
perDay <- rawData %>% select(date, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(perDay)
hist(perDay$total.steps.per.day[!is.na(perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
mean.total.steps <- mean(perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(mean.total.steps, digits = 0))))
median.total.steps <- median(perDay$total.steps.per.day)
print(paste("Median of total steps:", round(mean.total.steps, digits = 0)))
avg.daily.act.pat <- rawData %>% select(interval, steps) %>%
filter(!is.na(steps)) %>%
ddply(.(interval), summarize, average.steps.per.interval = mean(steps))
summary.out(avg.daily.act.pat)
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
head(avg.daily.act.pat)
with(avg.daily.act.pat, plot(interval_dat, average.steps.per.interval,
type = "l",
main = "Daily activity pattern (missing values excluded)",
xlab = "Time of Day",
ylab = "Average Steps per Intervall"))
t <- merge.data.frame(rawData, avg.daily.act.pat, by.x = "interval", by.y = "interval")
t$steps[is.na(t$steps)] <- t$average.steps.per.interval[is.na(t$steps)]
enhanced.set <- t %>% select(interval, steps, date)
summary.out(enhanced.set)
enhanced.perDay <- enhanced.set %>% select(date, steps) %>%
ddply(.(date), summarise, total.steps.per.day = sum(steps))
summary.out(enhanced.perDay)
hist(enhanced.perDay$total.steps.per.day[!is.na(enhanced.perDay$total.steps.per.day)],
breaks = 20,
main = "Total Steps per Day",
xlab = "Steps per Day",
ylab = "Found on n Days",
col = "red")
enhanced.mean.total.steps <- mean(enhanced.perDay$total.steps.per.day)
print(paste("Mean of total steps:", as.character(round(enhanced.mean.total.steps, digits = 0))))
enhanced.median.total.steps <- median(enhanced.perDay$total.steps.per.day)
print(paste("Median of total steps:", round(enhanced.mean.total.steps, digits = 0)))
t <- Sys.setlocale(category = "LC_ALL", locale = "English")
enhanced.set$weekday <-
factor(
ifelse(substr(weekdays(enhanced.set$date), 1, 1) == "S", "weekend", "weekday"))
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M")
summary.out(weekday.set)
?print
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(data.table)
library(stringr)
library(plyr)
library(dplyr)
source("SummaryOut.R")
f <- ".\\figure\\activity.csv"
rawData <- fread(f, sep = ",")
rawData$date <- as.Date(rawData$date)
summary.out(rawData)
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M")
summary.out(weekday.set)
str(weekday.set)
xyplot(interval_dat ~ average.steps.per.interval | weekday, layout = c(1,2)
xyplot(interval_dat ~ average.steps.per.interval | weekday, layout = c(1,2))
require(lattice)
xyplot(interval_dat ~ average.steps.per.interval | weekday, layout = c(1,2))
xyplot(interval_dat ~ average.steps.per.interval | weekday, data = weekday.set, layout = c(1,2))
xyplot(average.steps.per.interval ~ interval_dat | weekday, data = weekday.set, layout = c(1,2))
xyplot(interval_dat ~ average.steps.per.interval | weekday, data = weekday.set, layout = c(1,2))
xyplot(interval_dat ~ average.steps.per.interval | weekday, data = weekday.set, layout = c(1,2), type = "b")
xyplot(interval_dat ~ average.steps.per.interval | weekday, data = weekday.set, layout = c(1,2), type = "l")
xyplot(~ average.steps.per.interval | weekday, data = weekday.set, layout = c(1,2), type = "l")
weekday.set <- weekday.set %>% sort(interval_dat)
weekday.set <- weekday.set[order(weekday.set$interval_dat,)]
weekday.set <- weekday.set %>% arrange(weekday, interval_dat)
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
as.POSIXlt(
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M"))
summary.out(weekday.set)
weekday.set <- weekday.set %>% arrange(weekday, interval_dat)
weekday.set <- enhanced.set %>% select(weekday, interval, steps) %>%
ddply(.(weekday, interval), summarize,
average.steps.per.interval = mean(steps))
weekday.set$interval_dat <-
as.POSIXct(
strptime(str_sub(paste0("0000", weekday.set$interval), -4, -1), "%H%M"))
summary.out(weekday.set)
weekday.set <- weekday.set %>% arrange(weekday, interval_dat)
xyplot(average.steps.per.interval ~ interval_dat | weekday, data = weekday.set, layout = c(1,2), type = "l")
weekday.set <- weekday.set %>% arrange(weekday, interval_dat)
xyplot(average.steps.per.interval ~ interval | weekday, data = weekday.set, layout = c(1,2), type = "l", ylab = "Number of steps", xlab = "Intervall")
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
summary.out(avg.daily.act.pat)
head(avg.daily.act.pat)
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
summary.out(avg.daily.act.pat)
summary.out(avg.daily.act.pat)
avg.daily.act.pat$interval_dat <-
strptime(str_sub(paste0("0000", avg.daily.act.pat$interval), -4, -1), "%H%M")
str(avg.daily.act.pat)
weekday.set <- weekday.set %>% arrange(weekday, interval)
xyplot(average.steps.per.interval ~ interval | weekday, data = weekday.set, layout = c(1,2), type = "l", ylab = "Number of steps", xlab = "Intervall")
setwd("C:/Users/ralf/OneDrive/Documents/Esprit/Data Science/R Woring Directory/C05/CP1/RepData_PeerAssessment1")
